* Navigation
** C-x →                  | Switch to next buffer.  :navigation:
** C-x ←                  | Switch to previous buffer.  :navigation:
** end-of-buffer-other-window    Really great feature to jump to the end of the buffer in the other window.
** C-PgUp/PgDown        Page up and down in the next window.
* Selection
** M-h                  Gradually select expanded line
** M-m v                Expand region
** C-x h                mark-whole-buffer or select the whole buffer
* Window
** C-x }                | Increase expand window horizontally  :window:
** C-x ^                  (enlarge-window)  :window:
** C-x C- / C+          Zoom size of current buffer
** C-mouse-wheel        zoom-all-frames-out/in 
** C-x 1                Maximize and reverse toggle.
** C-x 2                Split window vertically.
* Macro
| C-x (                 | Start macro                                                                                                                         |
| C-x )                 | End macro (but this doesn't make it available)                                                                                      |
| Name macro            | M-x name-last-kbd-macro , which should be called after end macro                                                                    |
| Insert macro          | M-x insert-kbd-macro (requires the a named keyboard macro first.                                                                    |
| C-x e                 | Run last keyboard macro                                                                                                             |
| Macro doc             | https://www.emacswiki.org/emacs/KeyboardMacros                                                                                      |
* Edits
| M-d                   | Delete forward one word                                                                                                             |
| M-backspace           | Delete back one word                                                                                                                |
| C-SPC select C-x r k  | Block edit (unverified)                                                                                                             |
| C-x z                 | Repeat previous command again. After doing it once, just type z.                                                                    |
| C-: /evil-ex          | Evil command line. Try :%s/regex/replacement/options where options = g(all on line),c(confirm). Use \1 extract.                     |
* Configuration
** M-m ?         helm-descbinds Helm buffer for describing bindings. Useful for mapping keys.
** defhydra      Command in order to set hydra functions
https://youtu.be/ONHEDj3kWrE?t=198
* Emacs
| M-m r y               | helm-show-killring                                                                                                                  |
| M-x recover-session   | Recover session after crash and work hasn't been saved. Use C-c C-c on the session you want to recover (by date)                    |
| C-x C-                | leave Emacs                                                                                                                         |
| C-h f                 | To go to documentation of function you want, then has link to source OR You can get to the source with M-x find-library org-agenda. |
| Go to source          | M-x find-library                                                                                                                    |
| C-h b                 | Or (helm-decsbinds) to describe all key bindings                                                                                    |
| toggle-truncate-lines | Word wrap                                                                                                                           |
** M-o M-o               font-lock-fontify-block or reset/refresh syntax highlighting in the current block.
* Spacemacs
Helm https://tuhdo.github.io/helm-intro.html
* Other
| C-c C-c           | Babel execute code inside a code block                                                     |
| C-x C-e           | Evaluate highlighted point                                                                 |
| M-:               | Evaluate single command                                                                    |
| M-x calc u v      | Enter calc mode and show all units. Remember tha ' allows writing an algebraic expression. |
| C-x z             | Repeat last command                                                                        |
| C-x d / D / R / C | Dired delete, move, copy, can also use m to mark files                                     |
* Dired
** C-x d      Run Dired from the location of the current buffer.
** a          Switch locations but reuse buffer
** M-m f y    Copy file path
* File manipulation
** M-m f y    Copy file path                                      :spacemacs:
** helm-find-file, C-c X   Open a file with default application
* Helm
** C-u C-c C-k / C-c TAB  | From the helm file chooser buffer (M-m f f) this will select the full file path to the kill ring  :navigation:
https://emacs.stackexchange.com/questions/19819/how-can-i-use-helm-file-finder-to-copy-a-file-path-to-a-buffer
** helm find files recursively
Starting from the directory you are currently browsing, it is possible to have
completion of all directories underneath.  Say you are at "/home/you/foo/" and
you want to go to "/home/you/foo/bar/baz/somewhere/else", simply type
"/home/you/foo/..else" and hit ‘C-j’ or enter
the final "/".  Helm will then list all possible directories under "foo"
matching "else".
** M-C (use shift)    in M-f-f in order to helm copy file.
** M-R (use shift)    in M-f-f in order to helm move/rename file.
** helm find file contents (similar to grep -R)

https://github.com/emacs-helm/helm/wiki/Grep
You can use helm-ff-do-grep inside helm-find-files session.

- M-m f f
- navigate to directory and append /** or /** to the search directory path
- C-s
- Type in pattern like "mysearch" without the quotes.

** TODO Helm recent? Within helm C-c h, but it isn't the same.
** Expanded list of ALL helm documentation [[file:helm-file-help.org::*Helm%20Find%20Files][Helm Find Files]]
** M-e in helm find files to open eshell e-shell
* Unorganized
- Useful: org-export-insert-default-template

Spacemacs cheat sheet:
https://gist.github.com/robphoenix/9e4db767ab5c912fb558

Autocomplete orgmode templates:
https://orgmode.org/manual/Easy-templates.html
* Org
| M-m a o l     | M-x org-store-link to store a link to a file, then C-c C-l to paste link                       |
| C-c C-j       | org-goto in order to jump                                                                      |
| C-c C-o       | Open link in browser                                                                           |
| C-c C-x C-w   | org-cut-subtree for cutting sub tree or table regsion                                          |
| C-c C-,       | org-insert-structure-template = <q TAB  https://github.com/syl20bnr/spacemacs/issues/11798     |
| C-x n s / b   | Narrow buffer to only current subtree or block  (hiding everything else)                       |
| C-x n w       | Widen buffer removing previous narrowing                                                       |
| C-c [     / ] | Add current file to the list of agenda files. The file is added to the front of the list.      |
| C-,           | Cycle through agenda file list, visiting one file after the other.                             |
| C-c a a       | Agenda for the week. More commands in this view https://orgmode.org/guide/Agenda-commands.html |
| C-c .         | org-time-stamp which lets you input a date.                                                    |
| C-c C-v C-r   | (org-babel-goto-named-result)                                                                  |
|               |                                                                                                |
| C-c *         | (org-toggle-heading) Turn a normal line or plain list item into a headline                     |
* OrgMode
** TODO How to rebind a key in org agenda to shift 7 days 
First see the code in OrgMode how it binds keys.
https://github.com/bzg/org-mode/blob/master/lisp/org-agenda.el#L2327

Then see these instructions for simple keyboard bindings.
https://emacs.stackexchange.com/questions/19403/how-do-i-change-key-bindings-for-org-mode-agenda-view

Or you can use the orgmode functions for remapping keys
https://github.com/bzg/org-mode/blob/300f15bcbbaf7a49c94e2cfca4f4335f0dc55fc8/lisp/org-keys.el#L312
https://lists.gnu.org/archive/html/emacs-orgmode/2011-02/msg00260.html

Still not sure how to postpone using org-schedule or org-agenda-schedule without bringing up dialog.
** Clocking
https://orgmode.org/manual/Clocking-commands.html
C-c C-x C-i (org-clock-in)
Start the clock on the current item (clock-in). This inserts the ‘CLOCK’ keyword together with a timestamp. If this is not the first clocking of this item, the multiple ‘CLOCK’ lines are wrapped into a ‘LOGBOOK’ drawer (see also the variable org-clock-into-drawer). You can also overrule the setting of this variable for a subtree by setting a ‘CLOCK_INTO_DRAWER’ or ‘LOG_INTO_DRAWER’ property. When called with a C-u prefix argument, select the task from a list of recently clocked tasks. With two C-u C-u prefixes, clock into the task at point and mark it as the default task; the default task is always be available with letter d when selecting a clocking task. With three C-u C-u C-u prefixes, force continuous clocking by starting the clock when the last clock stopped.

While the clock is running, Org shows the current clocking time in the mode line, along with the title of the task. The clock time shown is all time ever clocked for this task and its children. If the task has an effort estimate (see Effort Estimates), the mode line displays the current clocking time against it73. If the task is a repeating one (see Repeated tasks), show only the time since the last reset of the task74. You can exercise more control over show time with the ‘CLOCK_MODELINE_TOTAL’ property. It may have the values ‘current’ to show only the current clocking instance, ‘today’ to show all time clocked on this tasks today—see also the variable org-extend-today-until, all to include all time, or auto which is the default75. Clicking with mouse-1 onto the mode line entry pops up a menu with clocking options.

C-c C-x C-o (org-clock-out)
Stop the clock (clock-out). This inserts another timestamp at the same location where the clock was last started. It also directly computes the resulting time in inserts it after the time range as ‘=>HH:MM’. See the variable org-log-note-clock-out for the possibility to record an additional note together with the clock-out timestamp76.

C-c C-x C-x (org-clock-in-last)
Re-clock the last clocked task. With one C-u prefix argument, select the task from the clock history. With two C-u prefixes, force continuous clocking by starting the clock when the last clock stopped.

C-c C-x C-e (org-clock-modify-effort-estimate)
Update the effort estimate for the current clock task.

C-c C-c or C-c C-y (org-evaluate-time-range)
Recompute the time interval after changing one of the timestamps. This is only necessary if you edit the timestamps directly. If you change them with S-<cursor> keys, the update is automatic.

C-S-UP (org-clock-timestamps-up)
C-S-DOWN (org-clock-timestamps-down)
On CLOCK log lines, increase/decrease both timestamps so that the clock duration keeps the same value.

S-M-UP (org-timestamp-up)
S-M-DOWN (org-timestamp-down)
On ‘CLOCK’ log lines, increase/decrease the timestamp at point and the one of the previous, or the next, clock timestamp by the same duration. For example, if you hit S-M-UP to increase a clocked-out timestamp by five minutes, then the clocked-in timestamp of the next clock is increased by five minutes.

C-c C-t (org-todo)
Changing the TODO state of an item to DONE automatically stops the clock if it is running in this same item.

C-c C-x C-q (org-clock-cancel)
Cancel the current clock. This is useful if a clock was started by mistake, or if you ended up working on something else.

C-c C-x C-j (org-clock-goto)
Jump to the headline of the currently clocked in task. With a C-u prefix argument, select the target task from a list of recently clocked tasks.

C-c C-x C-d (org-clock-display)
** Useful guide to clocking configuration
https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html
** M-x org-md-export-as-markdown        To export as markdown
https://markdown-here.com/index.html
https://emacs.stackexchange.com/questions/20562/how-to-make-the-org-mode-exported-table-aligned-in-gmail
** Styling orgmode export
https://github.com/fniessen/org-html-themes/blob/master/README.org
* OrgAgenda https://www.gnu.org/software/emacs/manual/html_node/org/Agenda-commands.html
** C-u C-u l         Will give you a clock log table of time logged (org-agenda-log-mode)
https://emacs.stackexchange.com/questions/19746/get-a-timeline-of-clocked-time-in-org-mode
** C-c C-s +4        Postpone the task out the 'TODO' item by 4 days  :orgagenda:
https://lists.gnu.org/archive/html/emacs-orgmode/2007-08/msg00059.html
** C-c C-c           Set tag for the current task  :orgagenda:
https://orgmode.org/guide/Setting-tags.html#Setting-tags
** m, B, s           In agenda view, mark, bulk, reschedule  :orgagenda:
** f, b              Go forward or back the current day span :orgagenda:
** j                 Go to date  :orgagenda:
** Clock report
Create an org file with the following contents
#+BEGIN: clocktable :maxlevel 4 :scope agenda :block thisweek :step day 
#+END:

Fuller explanation https://emacs.stackexchange.com/questions/35708/org-mode-how-to-generate-clock-report-for-hours-worked-each-day
* Org mode table stuff

https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html

** In a cell, do C-c ? for a reference of table functions.
** Reference visualization grid with C-c }:
** DEDICATED BUFFER  C-c '
**  C-c *        Recalculate a line or entire table (org-table-recalculate )
 Recalculate the current row by first applying the stored column formulas from left to right, 
and all field/range formulas in the current row.
*** TODO or C-c C-c if you're on the #+TBLFM line. (Not working!)
** C-c C-c Recalculate table
https://lists.gnu.org/archive/html/emacs-orgmode/2018-06/msg00243.html
** TODO Clean the following up.
#+begin_src 
But what we really want is to compute the formulas for all fields in the column named "Mean". 
In other words, we really want a column formula, not a field formula.

To replace the formula with a column formula, go back to the field where it has been defined and type =vmean($2..$3). 
Note that the only difference with what you've inserted previously is that the formula is prefixed by = instead of :=. 
When you're done, do a C-c C-c in the field: you should be prompted whether you want to 
replace the formula with a column formula, which is precisely what we want.

#+end_src

#+begin_quote
Interactively edit formulas
------------------------------------------------
For now we have been defining formulas by inserting them directly in the table cells: typing = in a field 
starts the definition for a column formula and typing := starts a definition for a field formula.

If you prefer, you can edit formulas in the minibuffer: use C-c = for 
editing column formulas or C-u C-c = for field formulas.


This new buffer lists all the formulas for the table at point and provides facilities to edit the references.

When the cursor is above a reference, the corresponding field in the table get highlighted. Nice! 
But you can do more than that: you can actually select the reference by using the S-<left/right/up/down> keys.
#+end_quote

General advise about editing and debugging fields
https://orgmode.org/org.html#Editing-and-debugging-formulas
* Elisp Coding


Check the basic example programs
http://ergoemacs.org/emacs/elisp_examples.html
Remember to hover over commands to get highlighting about them.

Some basics
https://www.gnu.org/software/emacs/manual/html_node/eintr/car-cdr-_0026-cons.html


* Clojure Coding
** M-;                  Add or remove comments  :coding:
https://www.gnu.org/software/emacs/manual/html_node/emacs/Comment-Commands.html
** M-m s j              helm-jump-in-buffer or show functions in file.
** M-RET = or zprint    cider-format-buffer / zprint autoformatter
https://clojureverse.org/t/autoformatting-clojure-code/1243
*
** C-;                  
* Magit
** Read the following https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified
** k                Drop stash                                                                                                                          |
** R                magit-file-rename  https://stackoverflow.com/questions/17610365/how-to-use-git-mv-from-magit
** C-c M-g B        blame with options, or 'b' for just blame.
** Duplicate file with history

Even if git doesn't preserve the line history, it still can be seen with git blame.
If you really need to see the history without passing options to blame, use the following technique.
 https://stackoverflow.com/a/44036771/93074

Otherwise consider just using -C and -M options.
https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-blame

Or a better git log
https://blog.andrewray.me/a-better-git-blame/
#+begin_src 
git log -p -M --follow --stat -- path/to/your/file
#+end_src
** Selectively discarding bits
Use shift on lines and k
https://utcc.utoronto.ca/~cks/space/blog/programming/MagitDiscardingChanges?showcomments
* Using Magit to solve conflicts

** RET on conflict opens in smerge editor

Three way diff:
https://coderwall.com/p/mcrwag/use-magit-ediff-to-resolve-merge-conflicts

** 'e' on conflict opens in ediff

Note that if you navigate to a conflict with RET and this is an orgmode file,
It may look like there is no way to edit the differences because << == >> is missing.
This can be because orgmode hides this text and only displays the headings!
Remember to expand out the subtree to fix the problems.

Useful reading
https://magit.vc/manual/magit/Resolving-Conflicts.html
* Notes
** helm-occur is the default edit window that comes with helm.
** TODO helm-swoop is an advanced mode version that hasn't been committed to in a while.
Outstanding issue: https://github.com/ShingoFukuyama/helm-swoop/issues/133
Also helm-swoop-caret-match seems to be blocking our ability to match new line characters
** helm-ag is yet another version that is built with grep. https://github.com/syohex/emacs-helm-ag

** Agenda refreshing 
* Wishlist
** A way to go back when navigating menus.
* BUGS
** helm-ag doesn't work in spacemacs https://github.com/bbatsov/helm-projectile/issues/113
Might simply be that the `ag` command is not on the command prompt.
* Non emacs infrastructure like tasks
** Making a new brew formulae
https://github.com/Homebrew/brew/blob/master/docs/Formula-Cookbook.md

Instructions start from 'Grab the url, midway down on the page.
* TODO Find out how to highlight helm actions 
The following has ben useful
https://github.com/emacs-helm/helm/wiki/Developing



helm-org-headings-fontify at https://github.com/emacs-helm/helm/blob/master/helm-org.el
* How to investigate emacs problems
https://emacs.stackexchange.com/questions/28429/how-do-i-troubleshoot-emacs-problems
